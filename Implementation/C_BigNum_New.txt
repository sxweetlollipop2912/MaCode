struct maxa {
	int Num[maxC];
	int Len;

	maxa() {
		std::fill(Num, Num + maxC, 0);
		Len = 1;
	}
	maxa(int x) {
		std::fill(Num, Num + maxC, 0);
		Len = 0;
		for (int i = 0; x != 0; i++)
			Num[i] = x % 10, x /= 10, ++Len;
		Len = std::max(Len, 1);
	}
	maxa(long long x) {
		std::fill(Num, Num + maxC, 0);
		Len = 0;
		for (int i = 0; x != 0; i++)
			Num[i] = x % 10, x /= 10, ++Len;
		Len = std::max(Len, 1);
	}
};


void Output(const maxa& a) {
	for (int i = a.Len - 1; i >= 0; i--)
		std::cout << a.Num[i];
}


void Trim(maxa& a) {
	while (a.Len != 1 && a.Num[a.Len - 1] == 0) 
		--a.Len;
}


void Add(maxa &a, const maxa &b) { // a += b
	a.Len = std::max(a.Len, b.Len);

	for (int i = 0; i < a.Len; i++) {
		a.Num[i] = a.Num[i] + b.Num[i];
		if (a.Num[i] > 9) {
			if (i + 1 == a.Len) ++a.Len;
			a.Num[i + 1] += a.Num[i] / 10;
			a.Num[i] %= 10;
		}
	}
	Trim(a);
}


void Multi(const maxa &a, const maxa &b, maxa &re) { // a*= b
	re.Len = (a.Len - 1) + (b.Len - 1) + 1;

	for (int i = 0; i < a.Len; i++) for (int j = 0; j < b.Len; j++) {
		re.Num[i + j] += a.Num[i] * b.Num[j];
		if (re.Num[i + j] > 9) {
			if (i + j + 1 == re.Len) ++re.Len;
			re.Num[i + j + 1] += re.Num[i + j] / 10;
			re.Num[i + j] %= 10;
		}
	}
	while (re.Num[re.Len - 1] > 9) {
		re.Num[re.Len] += re.Num[re.Len - 1] / 10;
		re.Num[re.Len - 1] %= 10;
		++re.Len;
	}
	Trim(re);
}